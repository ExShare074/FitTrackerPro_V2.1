import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from main.modules.utils.workout_generator import get_today_workout
from main.modules.utils.training_cycle import start_new_cycle, check_active_cycle


API_TOKEN = '7272100287:AAHs4MtOusnAKO6QhgFOqZ0CmSZVx4zxsQ8'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
start_cycle_btn = KeyboardButton('–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞')
today_workout_btn = KeyboardButton('–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
menu = ReplyKeyboardMarkup(resize_keyboard=True).add(start_cycle_btn, today_workout_btn)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FitTrackerPro üí™\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=menu)

@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞')
async def handle_start_cycle(message: types.Message):
    start_new_cycle()
    await message.answer("‚úÖ –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(lambda message: message.text == '–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
async def handle_today_workout(message: types.Message):
    if not check_active_cycle():
        await message.answer("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ.")
        return
    workout = get_today_workout()
    formatted = "\n".join(f"{w['name']} ‚Äî {w['sets']}√ó{w['reps']}" for w in workout)
    await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n{formatted}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

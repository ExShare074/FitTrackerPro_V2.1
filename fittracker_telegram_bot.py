import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_states[user.id] = {"stage": "start"}
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitTracker Pro (Telegram Edition)!\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ /help –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å GIF üí™"
    )
# –ö–æ–º–∞–Ω–¥–∞ /program
async def choose_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üèÅ 8 –Ω–µ–¥–µ–ª—å", callback_data="program_8"),
            InlineKeyboardButton("üèÅ 10 –Ω–µ–¥–µ–ª—å", callback_data="program_10"),
            InlineKeyboardButton("üèÅ 12 –Ω–µ–¥–µ–ª—å", callback_data="program_12")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def program_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    weeks = int(query.data.split("_")[1])
    user_id = query.from_user.id
    user_states[user_id]["program_weeks"] = weeks
    user_states[user_id]["current_week"] = 1
    user_states[user_id]["progress"] = 0

    await query.edit_message_text(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ {weeks} –Ω–µ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–¥–µ–ª–∏ 1!")

# –ó–∞–≥–ª—É—à–∫–∞: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ 1 –¥–µ–Ω—å
daily_workout = {
    "Push-ups": "https://media.giphy.com/media/XE7Wfij2a7gQbnk16T/giphy.gif",
    "Squats": "https://media.giphy.com/media/l41YxQs5NqvZTmWLu/giphy.gif",
    "Plank": "https://media.giphy.com/media/l0MYB8Ory7Hqefo9a/giphy.gif"
}

# –ö–æ–º–∞–Ω–¥–∞ /today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_states or "program_weeks" not in user_states[user_id]:
        await update.message.reply_text("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ /program.")
        return

    keyboard = [[InlineKeyboardButton(name, callback_data=f"exercise_{name}")] for name in daily_workout.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ GIF
async def send_exercise_gif(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    exercise_name = query.data.split("_", 1)[1]
    gif_url = daily_workout.get(exercise_name)

    if gif_url:
        await context.bot.send_animation(chat_id=query.message.chat.id, animation=gif_url, caption=f"üèãÔ∏è‚Äç‚ôÇÔ∏è {exercise_name}")
    else:
        await context.bot.send_message(chat_id=query.message.chat.id, text="GIF –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():

    application = ApplicationBuilder().token("7272100287:AAHs4MtOusnAKO6QhgFOqZ0CmSZVx4zxsQ8").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("program", choose_program))
    application.add_handler(CommandHandler("today", show_today))

    application.add_handler(CallbackQueryHandler(program_selected, pattern=r"^program_\d+$"))
    application.add_handler(CallbackQueryHandler(send_exercise_gif, pattern=r"^exercise_"))

    application.run_polling()

if __name__ == "__main__":
    main()
